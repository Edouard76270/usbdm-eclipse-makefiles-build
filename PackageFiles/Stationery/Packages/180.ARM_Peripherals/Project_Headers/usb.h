/*
 * usb.h
 *
 *  Created on: 25/10/2013
 *      Author: podonoghue
 */

#ifndef USB_H_
#define USB_H_
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "hardware.h"

namespace USBDM {

/**
 * Type definition for USB interrupt call back
 *
 *  @param status Interrupt status e.g. USB_ISTAT_SOFTOK_MASK, USB_ISTAT_STALL_MASK etc
 */
typedef void (*USBCallbackFunction)(uint8_t status);

template <class Info>
class UsbBase_T {

protected:
   static constexpr volatile USB_Type *usb      = Info::usb;
   static constexpr volatile uint32_t *clockReg = Info::clockReg;

public:
   /**
    * Initialise USB to default settings\n
    * Configures all USB pins
    */
   static void enable() {
      *clockReg |= Info::clockMask;
      __DMB();

      Info::initPCRs();

      enableNvicInterrupts(Info::irqHandlerInstalled);
   }

   /**
    * Enable/disable interrupts in NVIC
    *
    * @param enable True => enable, False => disable
    */
   static void enableNvicInterrupts(bool enable) {
      if (enable) {
         // Enable interrupts
         NVIC_EnableIRQ(Info::irqNums[0]);

         // Set priority level
         NVIC_SetPriority(Info::irqNums[0], Info::irqLevel);
      }
      else {
         // Disable interrupts
         NVIC_DisableIRQ(Info::irqNums[0]);
      }
   }

   /**
    * Enable/disable interrupts
    *
    * @param mask Mask of interrupts to enable e.g. USB_INTEN_SOFTOKEN_MASK, USB_INTEN_STALLEN_MASK etc
    */
   static void enableInterrupts(uint8_t mask=0xFF) {
      usb->INTEN = mask;
   }

   /**
    * Enable/disable OTG interrupts
    *
    * @param mask Mask of interrupts to enable e.g. USB_OTGICR_IDEN_MASK, USB_OTGICR_ONEMSECEN_MASK etc
    */
   static void enableOtgInterrupts(uint8_t mask=0xFF) {
      usb->OTGICR = mask;
   }

};

/**
 * Template class to provide USB callback
 */
template<class Info>
class UsbIrq_T : public UsbBase_T<Info> {

protected:
   /** Callback function for ISR */
   static USBCallbackFunction callback;

public:
   /**
    * IRQ handler
    */
   static void irqHandler(void) {
      uint8_t status = Info::usb->ISTAT;
      if (callback != 0) {
         callback(status);
      }
   }

   /**
    * Set Callback function
    *
    *   @param theCallback - Callback function to be executed on USB alarm interrupt
    */
   static void setCallback(USBCallbackFunction theCallback) {
      callback = theCallback;
      if (callback != NULL) {
         // Enable interrupts from USB alarm
         NVIC_EnableIRQ(Info::irqNums[0]);
      }
      else {
         // Disable interrupts from USB alarm
         NVIC_DisableIRQ(Info::irqNums[0]);
      }
   }
};

template<class Info> USBCallbackFunction UsbIrq_T<Info>::callback = 0;

#ifdef USBDM_USB_IS_DEFINED
/**
 * Class representing USB
 */
using Usb = UsbIrq_T<UsbInfo>;

#endif

#ifdef USBDM_USB0_IS_DEFINED
/**
 * Class representing USB
 */
using Usb0 = UsbIrq_T<Usb0Info>;

#endif

} // End namespace USBDM

#endif /* USB_H_ */

/*
 * smc.h
 *
 *  Created on: 25/10/2013
 *      Author: podonoghue
 */

#ifndef SMC_H_
#define SMC_H_
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "hardware.h"

namespace USBDM {

/**
 * Type definition for SMC interrupt call back
 *
 *  @param timeSinceEpoch - Time since the epoch in seconds
 */
typedef void (*SMCCallbackFunction)();

template <class Info>
class SmcBase_T {

protected:
   static constexpr volatile SMC_Type *smc     = Info::smc;

public:
   enum {
      runm_run    = SMC_PMCTRL_RUNM(0),
      runm_vlpr   = SMC_PMCTRL_RUNM(2),
   };

   enum {
      stopm_stop  = SMC_PMCTRL_STOPM(0),
      stopm_vlps  = SMC_PMCTRL_STOPM(2),
      stopm_lls   = SMC_PMCTRL_STOPM(3),
      stopm_vllsx = SMC_PMCTRL_STOPM(4),
   };

   enum {
      stat_run    = SMC_PMSTAT_PMSTAT(0x01),
      stat_stop   = SMC_PMSTAT_PMSTAT(0x02),
      stat_vlpr   = SMC_PMSTAT_PMSTAT(0x04),
      stat_vlpw   = SMC_PMSTAT_PMSTAT(0x08),
      stat_vlps   = SMC_PMSTAT_PMSTAT(0x10),
      stat_lls    = SMC_PMSTAT_PMSTAT(0x20),
      stat_vlls   = SMC_PMSTAT_PMSTAT(0x40),
   };

   /**
    * Initialise SMC to default settings\n
    */
   static void initialise() {
      smc->PMPROT   = Info::pmprot;
      smc->VLLSCTRL = Info::vllsctrl;
   }

   /**
    * Enter Power Mode
    *
    * @param mode Power mode e.g. runm_vlpr
    */
   static bool enterPowerMode(uint8_t mode) {
      smc->PMCTRL = Info::pmctrl|mode;
      return true;
   }

   /**
    * Get current power mode
    */
   static uint8_t getPowerMode() {
      return smc->PMSTAT;
   }
};

#ifdef USBDM_SMC_IS_DEFINED
/**
 * Class representing SMC
 */
using Smc = SmcBase_T<SmcInfo>;

#endif

} // End namespace USBDM

#endif /* SMC_H_ */

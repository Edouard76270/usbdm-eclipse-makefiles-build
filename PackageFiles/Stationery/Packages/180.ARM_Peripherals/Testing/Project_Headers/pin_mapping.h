/**
 * @file      pin_mapping.h (derived from MK22F12810.usbdmHardware)
 * @version   1.2.0
 * @brief     Pin declarations for MK22FN128VDC10
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

#include "pcr.h"

/*
 * Common Mux settings for PCR
 */
#undef FIXED_ADC_FN            
#undef FIXED_GPIO_FN           
#undef FIXED_PORT_CLOCK_REG    
#define FIXED_ADC_FN             0                    // Fixed ADC Multiplexing value
#define FIXED_GPIO_FN            1                    // Fixed GPIO Multiplexing value
#define FIXED_PORT_CLOCK_REG     SCGC5                // Fixed PORT Clock

/*
 * Peripheral clock macros
 */
#define PORT_CLOCK_REG       SCGC5

namespace USBDM {

/** Class to static check signal mapping is valid */
template<class Info, int signalNum> class CheckSignal {
#ifdef DEBUG_BUILD
   static_assert((signalNum<Info::numSignals), "Non-existent signal - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != UNMAPPED_PCR), "Signal is not mapped to a pin - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != INVALID_PCR),  "Signal doesn't exist in this device/package");
   static_assert((signalNum>=Info::numSignals)||((Info::info[signalNum].gpioBit == UNMAPPED_PCR)||(Info::info[signalNum].gpioBit == INVALID_PCR)||(Info::info[signalNum].gpioBit >= 0)), "Illegal signal");
#endif
};

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
#define USBDM_ADC0_IS_DEFINED 
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC0_IRQn};

   // Template:adc0_diff_a

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Default value for ADCx_CFG1 register
   static constexpr uint32_t cfg1  = 
       ADC_CFG1_ADICLK(0)|
       ADC_CFG1_MODE(2)|
       ADC_CFG1_ADLSMP(0)|
       ADC_CFG1_ADIV(0)|
       ADC_CFG1_ADLPC(0);

   //! Default value for ADCx_CFG2 register
    static constexpr uint32_t cfg2  = 
       ADC_CFG2_MUXSEL_MASK | // Choose 'b' channels
       ADC_CFG2_ADLSTS(0)|
       ADC_CFG2_ADHSC(0)|
       ADC_CFG2_ADACKEN(0);

   //! Default value for ADCx_SC2 register
   static constexpr uint32_t sc2  =
       ADC_SC2_REFSEL(0)|
       ADC_SC2_DMAEN(0)|
       ADC_SC2_ACREN(0b000)|
       ADC_SC2_ADTRG(0);

   //! Number of signals available in info table
   static constexpr int numSignals  = 24;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: ADC0_SE4b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: ADC0_SE5b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: ADC0_SE6b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: ADC0_SE7b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: ADC0_SE8             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: ADC0_SE9             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  11: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  12: ADC0_SE12            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: ADC0_SE13            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: ADC0_SE14            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: ADC0_SE15            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  17: ADC0_SE17            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: ADC0_SE18            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  20: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  21: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  22: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  23: ADC0_SE23            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC0_DP0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: ADC0_DP1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: ADC0_DP2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   3: ADC0_DP3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC0_DM0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: ADC0_DM1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: ADC0_DM2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   3: ADC0_DM3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_ADC1_IS_DEFINED 
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC1_IRQn};

   // Template:adc0_diff_a

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Default value for ADCx_CFG1 register
   static constexpr uint32_t cfg1  = 
       ADC_CFG1_ADICLK(0)|
       ADC_CFG1_MODE(2)|
       ADC_CFG1_ADLSMP(0)|
       ADC_CFG1_ADIV(0)|
       ADC_CFG1_ADLPC(0);

   //! Default value for ADCx_CFG2 register
    static constexpr uint32_t cfg2  = 
       ADC_CFG2_MUXSEL_MASK | // Choose 'b' channels
       ADC_CFG2_ADLSTS(0)|
       ADC_CFG2_ADHSC(0)|
       ADC_CFG2_ADACKEN(0);

   //! Default value for ADCx_SC2 register
   static constexpr uint32_t sc2  =
       ADC_SC2_REFSEL(0)|
       ADC_SC2_DMAEN(0)|
       ADC_SC2_ACREN(0b000)|
       ADC_SC2_ADTRG(0);

   //! Number of signals available in info table
   static constexpr int numSignals  = 40;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: ADC1_SE4b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: ADC1_SE5b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: ADC1_SE6b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: ADC1_SE7b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: ADC1_SE8             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: ADC1_SE9             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  11: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  12: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  13: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  14: ADC1_SE14            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: ADC1_SE15            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  17: ADC1_SE17            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: ADC1_SE18            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  20: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  21: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  22: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  23: ADC1_SE23            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  24: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  25: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  26: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  27: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  28: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  29: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  30: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  31: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  32: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  33: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  34: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  35: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  36: ADC1_SE4a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  37: ADC1_SE5a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  38: ADC1_SE6a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  39: ADC1_SE7a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC1_DP0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: ADC1_DP1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   3: ADC1_DP3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC1_DM0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: ADC1_DM1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   3: ADC1_DM3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Analogue Comparator
 * @brief Pins used for Analogue Comparator
 * @{
 */
#define USBDM_CMP0_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP0_IRQn};

   // Template:cmp0_mkv

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! CMP Control Register 0
   static constexpr uint32_t cr0 =
      CMP_CR0_FILTER_CNT(0)     | // Filter Sample Count
      CMP_CR0_HYSTCTR(0);         // Comparator hard block hysteresis control

   #ifndef CMP_CR1_TRIGM
   #define CMP_CR1_TRIGM(x) 0
   #endif

   //! CMP Control Register 1
   static constexpr uint32_t cr1 =
      CMP_CR1_SE(0)    | // Sample Enable
      CMP_CR1_WE(0)    | // Windowing Enable
      CMP_CR1_TRIGM(0) | // Trigger Mode Enable
      CMP_CR1_PMODE(0) | // Power mode Select
      CMP_CR1_INV(0)   | // Comparator Invert
      CMP_CR1_COS(0)   | // Comparator Output Select
      CMP_CR1_OPE(0)   | // Comparator Output Pin Enable
      CMP_CR1_EN(0);     // Comparator Module Enable

   //! CMP Filter Period Register
   static constexpr uint32_t fpr =
      CMP_FPR_FILT_PER(0); // Filter Sample Period

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CMP0_IN0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CMP0_IN1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: CMP0_IN2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: CMP0_IN3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: CMP0_IN4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: CMP0_IN5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: CMP0_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_CMP1_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP1_IRQn};

   // Template:cmp0_mkv

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! CMP Control Register 0
   static constexpr uint32_t cr0 =
      CMP_CR0_FILTER_CNT(0)     | // Filter Sample Count
      CMP_CR0_HYSTCTR(0);         // Comparator hard block hysteresis control

   #ifndef CMP_CR1_TRIGM
   #define CMP_CR1_TRIGM(x) 0
   #endif

   //! CMP Control Register 1
   static constexpr uint32_t cr1 =
      CMP_CR1_SE(0)    | // Sample Enable
      CMP_CR1_WE(0)    | // Windowing Enable
      CMP_CR1_TRIGM(0) | // Trigger Mode Enable
      CMP_CR1_PMODE(0) | // Power mode Select
      CMP_CR1_INV(0)   | // Comparator Invert
      CMP_CR1_COS(0)   | // Comparator Output Select
      CMP_CR1_OPE(0)   | // Comparator Output Pin Enable
      CMP_CR1_EN(0);     // Comparator Module Enable

   //! CMP Filter Period Register
   static constexpr uint32_t fpr =
      CMP_FPR_FILT_PER(0); // Filter Sample Period

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CMP1_IN0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CMP1_IN1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: CMP1_IN3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   5: CMP1_IN5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: CMP1_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End CMP_Group
 * @}
 */
/**
 * @addtogroup Control_Group CONTROL, Control
 * @brief Pins used for Control
 * @{
 */
#define USBDM_CONTROL_IS_DEFINED 
/**
 * Peripheral information for CONTROL, Control
 */
class ControlInfo {
public:
   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int numSignals  = 16;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: RESET_b              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: JTAG_TCLK            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SWD_CLK              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: EZP_CLK              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: JTAG_TDI             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: EZP_DI               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: JTAG_TDO             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: TRACE_SWO            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: EZP_DO               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: JTAG_TMS             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: SWD_DIO              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: NMI_b                = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: EZP_CS_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: JTAG_TRST_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: CLKOUT               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: CLKOUT32K            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End Control_Group
 * @}
 */
/**
 * @addtogroup CRC_TODO_Group CRC, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_CRC_IS_DEFINED 
/**
 * Peripheral information for CRC, (Incomplete)
 */
class CrcInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CRC_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_CRC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End CRC_TODO_Group
 * @}
 */
/**
 * @addtogroup DAC_Group DAC, Digital-to-Analogue Converter
 * @brief Pins used for Digital-to-Analogue Converter
 * @{
 */
#define USBDM_DAC0_IS_DEFINED 
/**
 * Peripheral information for DAC, Digital-to-Analogue Converter
 */
class Dac0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DAC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DAC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: DAC0_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End DAC_Group
 * @}
 */
/**
 * @addtogroup DMA_TODO_Group DMA, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_DMA0_IS_DEFINED 
/**
 * Peripheral information for DMA, (Incomplete)
 */
class Dma0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMA0_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_DMA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMA_TODO_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Pins used for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMAMUX0_IS_DEFINED 
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA)
 */
class Dmamux0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMAMUX0_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DMAMUX_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   /* DMA channel numbers */
   enum DmaChannels {
      DMA0_SLOT_Disabled                            = 0,
      DMA0_SLOT_UART0_Receive                       = 2,
      DMA0_SLOT_UART0_Transmit                      = 3,
      DMA0_SLOT_UART1_Receive                       = 4,
      DMA0_SLOT_UART1_Transmit                      = 5,
      DMA0_SLOT_UART2_Receive                       = 6,
      DMA0_SLOT_UART2_Transmit                      = 7,
      DMA0_SLOT_I2S0_Receive                        = 12,
      DMA0_SLOT_I2S0_Transmit                       = 13,
      DMA0_SLOT_SPI0_Receive                        = 14,
      DMA0_SLOT_SPI0_Transmit                       = 15,
      DMA0_SLOT_SPI1_TransmitReceive                = 16,
      DMA0_SLOT_I2C0                                = 18,
      DMA0_SLOT_I2C1                                = 19,
      DMA0_SLOT_FTM0_Ch_0                           = 20,
      DMA0_SLOT_FTM0_Ch_1                           = 21,
      DMA0_SLOT_FTM0_Ch_2                           = 22,
      DMA0_SLOT_FTM0_Ch_3                           = 23,
      DMA0_SLOT_FTM0_Ch_4                           = 24,
      DMA0_SLOT_FTM0_Ch_5                           = 25,
      DMA0_SLOT_FTM0_Ch_6                           = 26,
      DMA0_SLOT_FTM0_Ch_7                           = 27,
      DMA0_SLOT_FTM1_Ch_0                           = 28,
      DMA0_SLOT_FTM1_Ch_1                           = 29,
      DMA0_SLOT_FTM2_Ch_0                           = 30,
      DMA0_SLOT_FTM2_Ch_1                           = 31,
      DMA0_SLOT_ADC0                                = 40,
      DMA0_SLOT_ADC1                                = 41,
      DMA0_SLOT_CMP0                                = 42,
      DMA0_SLOT_CMP1                                = 43,
      DMA0_SLOT_DAC0                                = 45,
      DMA0_SLOT_PDB                                 = 48,
      DMA0_SLOT_PortA                               = 49,
      DMA0_SLOT_PortB                               = 50,
      DMA0_SLOT_PortC                               = 51,
      DMA0_SLOT_PortD                               = 52,
      DMA0_SLOT_PortE                               = 53,
      DMA0_SLOT_LPUART_Receive                      = 58,
      DMA0_SLOT_LPUART_Transmit                     = 59,
      DMA0_SLOT_AlwaysEnabled0                      = 60,
      DMA0_SLOT_AlwaysEnabled1                      = 61,
      DMA0_SLOT_AlwaysEnabled2                      = 62,
      DMA0_SLOT_AlwaysEnabled3                      = 63,
   };
};

/** 
 * End DMAMUX_Group
 * @}
 */
/**
 * @addtogroup EWM_Group EWM, External Watchdog Monitor
 * @brief Pins used for External Watchdog Monitor
 * @{
 */
#define USBDM_EWM_IS_DEFINED 
/**
 * Peripheral information for EWM, External Watchdog Monitor
 */
class EwmInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = EWM_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_EWM_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: EWM_IN               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: EWM_OUT_b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End EWM_Group
 * @}
 */
/**
 * @addtogroup FTFA_TODO_Group FTFA, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_FTFA_IS_DEFINED 
/**
 * Peripheral information for FTFA, (Incomplete)
 */
class FtfaInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTFA_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTF_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End FTFA_TODO_Group
 * @}
 */
/**
 * @addtogroup FTM_Misc_Group FTM, Shared
 * @brief Pins used for Shared
 * @{
 */
#define USBDM_FTM_IS_DEFINED 
/**
 * Peripheral information for FTM, Shared
 */
class FtmInfo {
public:
   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM_CLKIN0           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM_CLKIN1           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End FTM_Misc_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
#define USBDM_FTM0_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM0_IRQn};

   // Template:ftm0_8ch_icrst

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Default Timer Period
   static constexpr uint32_t FtmExternalClock =  0;

   /**
    * Gets clock frequency of FTM
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      /** Pointer to hardware */
      static constexpr volatile FTM_Type *ftm = reinterpret_cast<volatile FTM_Type *>(basePtr);
   
      float freq;
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): freq = 0;                break;
      case FTM_SC_CLKS(1): freq = SystemBusClock;   break;
      case FTM_SC_CLKS(2): freq = SystemMcgffClock; break;
      case FTM_SC_CLKS(3): freq = FtmExternalClock; break;
      }
      return freq/(1UL<<(long)((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   /**
    * Gets clock frequency of FTM
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      /** Pointer to hardware */
      static constexpr volatile FTM_Type *ftm = reinterpret_cast<volatile FTM_Type *>(basePtr);
   
      uint32_t freq;
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): freq = SystemMcgirClock;    break;
      case FTM_SC_CLKS(1): freq = SystemLpoClock;      break;
      case FTM_SC_CLKS(2): freq = SystemErclk32kClock; break;
      case FTM_SC_CLKS(3): freq = SystemOscerClock;    break;
      }
      return freq/(1UL<<(long)((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)|
       FTM_SC_TOIE(0)|
       FTM_SC_CLKS(2)|
       FTM_SC_PS(3);

   //! Default Timer Period
   static constexpr uint32_t period =  10000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM0_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM0_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: FTM0_CH2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: FTM0_CH3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: FTM0_CH4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: FTM0_CH5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: FTM0_CH6             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: FTM0_CH7             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM0_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: FTM0_FLT1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: FTM0_FLT2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   3: FTM0_FLT3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM1_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM1_IRQn};

   // Template:ftm1_2ch_icrst

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Default Timer Period
   static constexpr uint32_t FtmExternalClock =  0;

   /**
    * Gets clock frequency of FTM
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      /** Pointer to hardware */
      static constexpr volatile FTM_Type *ftm = reinterpret_cast<volatile FTM_Type *>(basePtr);
   
      float freq;
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): freq = 0;                break;
      case FTM_SC_CLKS(1): freq = SystemBusClock;   break;
      case FTM_SC_CLKS(2): freq = SystemMcgffClock; break;
      case FTM_SC_CLKS(3): freq = FtmExternalClock; break;
      }
      return freq/(1UL<<(long)((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   /**
    * Gets clock frequency of FTM
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      /** Pointer to hardware */
      static constexpr volatile FTM_Type *ftm = reinterpret_cast<volatile FTM_Type *>(basePtr);
   
      uint32_t freq;
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): freq = SystemMcgirClock;    break;
      case FTM_SC_CLKS(1): freq = SystemLpoClock;      break;
      case FTM_SC_CLKS(2): freq = SystemErclk32kClock; break;
      case FTM_SC_CLKS(3): freq = SystemOscerClock;    break;
      }
      return freq/(1UL<<(long)((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)|
       FTM_SC_TOIE(0)|
       FTM_SC_CLKS(1)|
       FTM_SC_PS(0);

   //! Default Timer Period
   static constexpr uint32_t period =  10000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM1_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM1_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 1;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM1_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoQUAD {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 2;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM1_QD_PHA          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: FTM1_QD_PHB          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM2_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM2_IRQn};

   // Template:ftm1_2ch_icrst

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Default Timer Period
   static constexpr uint32_t FtmExternalClock =  0;

   /**
    * Gets clock frequency of FTM
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      /** Pointer to hardware */
      static constexpr volatile FTM_Type *ftm = reinterpret_cast<volatile FTM_Type *>(basePtr);
   
      float freq;
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): freq = 0;                break;
      case FTM_SC_CLKS(1): freq = SystemBusClock;   break;
      case FTM_SC_CLKS(2): freq = SystemMcgffClock; break;
      case FTM_SC_CLKS(3): freq = FtmExternalClock; break;
      }
      return freq/(1UL<<(long)((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   /**
    * Gets clock frequency of FTM
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      /** Pointer to hardware */
      static constexpr volatile FTM_Type *ftm = reinterpret_cast<volatile FTM_Type *>(basePtr);
   
      uint32_t freq;
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): freq = SystemMcgirClock;    break;
      case FTM_SC_CLKS(1): freq = SystemLpoClock;      break;
      case FTM_SC_CLKS(2): freq = SystemErclk32kClock; break;
      case FTM_SC_CLKS(3): freq = SystemOscerClock;    break;
      }
      return freq/(1UL<<(long)((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)|
       FTM_SC_TOIE(0)|
       FTM_SC_CLKS(1)|
       FTM_SC_PS(0);

   //! Default Timer Period
   static constexpr uint32_t period =  10000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM2_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM2_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 1;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM2_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoQUAD {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 2;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM2_QD_PHA          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: FTM2_QD_PHB          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
#define USBDM_GPIOA_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioAInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTA_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOA_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTA_IRQn};

};

#define USBDM_GPIOB_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioBInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTB_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOB_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTB_IRQn};

};

#define USBDM_GPIOC_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioCInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTC_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOC_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTC_IRQn};

};

#define USBDM_GPIOD_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioDInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTD_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOD_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTD_IRQn};

};

#define USBDM_GPIOE_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioEInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTE_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOE_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTE_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTE_IRQn};

};

/** 
 * End GPIO_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
#define USBDM_I2C0_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C0_IRQn};

   // Template:i2c0_f12

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C0_SCL             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2C0_SDA             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_I2C1_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C1_IRQn};

   // Template:i2c0_f12

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C1_SCL             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2C1_SDA             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End I2C_Group
 * @}
 */
/**
 * @addtogroup I2S_Group I2S, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
#define USBDM_I2S0_IS_DEFINED 
/**
 * Peripheral information for I2S, Inter-Integrated-Circuit Interface
 */
class I2s0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2S0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_I2S0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2S0_Tx_IRQn, I2S0_Rx_IRQn};

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2S0_MCLK            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2S0_RX_BCLK         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: I2S0_RX_FS           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: I2S0_TX_BCLK         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: I2S0_TX_FS           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: I2S0_TXD0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: I2S0_RXD0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End I2S_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Pins used for Low-leakage Wake-up Unit
 * @{
 */
#define USBDM_LLWU_IS_DEFINED 
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit
 */
class LlwuInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LLWU_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 16;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: LLWU_P0              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: LLWU_P1              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LLWU_P2              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: LLWU_P3              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: LLWU_P4              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: LLWU_P5              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: LLWU_P6              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: LLWU_P7              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: LLWU_P8              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: LLWU_P9              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: LLWU_P10             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: LLWU_P11             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: LLWU_P12             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: LLWU_P13             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: LLWU_P14             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: LLWU_P15             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Pins used for Low Power Timer
 * @{
 */
#define USBDM_LPTMR0_IS_DEFINED 
/**
 * Peripheral information for LPTMR, Low Power Timer
 */
class Lptmr0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LPTMR0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_LPTMR_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPTMR0_IRQn};

   // Template:lptmr0_0

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   /**
    * Gets clock frequency of LPTMR
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
      /** Pointer to hardware */
      static constexpr volatile LPTMR_Type *lptmr = reinterpret_cast<volatile LPTMR_Type *>(basePtr);
   
      float freq;
      switch(lptmr->PSR&LPTMR_PSR_PCS_MASK) {
      default:
      case LPTMR_PSR_PCS(0): freq = SystemMcgirClock;    break;
      case LPTMR_PSR_PCS(1): freq = SystemLpoClock;      break;
      case LPTMR_PSR_PCS(2): freq = SystemErclk32kClock; break;
      case LPTMR_PSR_PCS(3): freq = SystemOscerClock;    break;
      }
      if (lptmr->PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1UL<<(long)(((lptmr->PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   /**
    * Gets clock frequency of LPTMR
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
      /** Pointer to hardware */
      static constexpr volatile LPTMR_Type *lptmr = reinterpret_cast<volatile LPTMR_Type *>(basePtr);
   
      uint32_t freq;
      switch(lptmr->PSR&LPTMR_PSR_PCS_MASK) {
      default:
      case LPTMR_PSR_PCS(0): freq = SystemMcgirClock;    break;
      case LPTMR_PSR_PCS(1): freq = SystemLpoClock;      break;
      case LPTMR_PSR_PCS(2): freq = SystemErclk32kClock; break;
      case LPTMR_PSR_PCS(3): freq = SystemOscerClock;    break;
      }
      if (lptmr->PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1<<(((lptmr->PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   //! Default PSR value
   static constexpr uint32_t psr = 
      LPTMR_PSR_PRESCALE(0)|
      LPTMR_PSR_PBYP(0)|
      LPTMR_PSR_PCS(0);

   //! Default CSR value
   static constexpr uint32_t csr = 
      LPTMR_CSR_TMS(0)|
      LPTMR_CSR_TFC(0)|
      LPTMR_CSR_TPP(0)|
      LPTMR_CSR_TPS(0);

   //! Default Timer Compare value
   static constexpr uint32_t cmr = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 3;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: LPTMR0_ALT1          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LPTMR0_ALT2          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LPTMR_Group
 * @}
 */
/**
 * @addtogroup LPUART_Group LPUART, Low Power Universal Asynchronous Receiver/Transmitter
 * @brief Pins used for Low Power Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_LPUART0_IS_DEFINED 
/**
 * Peripheral information for LPUART, Low Power Universal Asynchronous Receiver/Transmitter
 */
class Lpuart0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LPUART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_LPUART0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPUART0_RX_TX_IRQn};

   // Template:lpuart0_0x4002a000

   static uint32_t getClockFrequency() {
      switch(SIM->SOPT2&SIM_SOPT2_LPUARTSRC_MASK) {
      default:
      case SIM_SOPT2_LPUARTSRC(0): return 0;
      case SIM_SOPT2_LPUARTSRC(1):
   #ifdef SIM_CLKDIV3_PLLFLLFRAC_MASK
         {
         int  pllfllfrac  = (SIM->CLKDIV3&SIM_CLKDIV3_PLLFLLFRAC_MASK)>>SIM_CLKDIV3_PLLFLLFRAC_SHIFT;
         int  pllflldiv   = (SIM->CLKDIV3&SIM_CLKDIV3_PLLFLLDIV_MASK)>>SIM_CLKDIV3_PLLFLLDIV_SHIFT;
         return (SystemPeripheralClock*(pllfllfrac+1))/(pllflldiv+1);
         }
   #else
         return SystemPeripheralClock;
   #endif
      case SIM_SOPT2_LPUARTSRC(2): return SystemOscerClock;
      case SIM_SOPT2_LPUARTSRC(3): return SystemMcgirClock;
      }
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: LPUART0_TX           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: LPUART0_RX           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LPUART0_RTS_b        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: LPUART0_CTS_b        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LPUART_Group
 * @}
 */
/**
 * @addtogroup MCG_Group MCG, Multipurpose Clock Generator
 * @brief Pins used for Multipurpose Clock Generator
 * @{
 */
#define USBDM_MCG_IS_DEFINED 
/**
 * Peripheral information for MCG, Multipurpose Clock Generator
 */
class McgInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = MCG_BasePtr;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:mcg_mkv30

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Not present on these devices
   static constexpr int ERRATA_E2448 = 0;

   enum ClockMode {
      ClockMode_None = -1,
      ClockMode_FEI  = 0,
      ClockMode_FEE,
      ClockMode_FBI,
      ClockMode_BLPI,
      ClockMode_FBE,
      ClockMode_BLPE,
      ClockMode_PBE,
      ClockMode_PEE,
   };

   //! Clock Mode
   static constexpr ClockMode clockMode = ClockMode_FEE;

   //! Frequency of Internal 48MHz Clock
   static constexpr uint32_t irc48m_clock = 48000000UL;

   //! Frequency of Slow Internal Reference Clock [~32kHz])
   static constexpr uint32_t system_slow_irc_clock = 32768UL;

   //! Frequency of Fast Internal Reference Clock [~4MHz])
   static constexpr uint32_t system_fast_irc_clock = 4000000UL;

   //! Control Register 1
   static constexpr uint32_t c1 =
      MCG_C1_FRDIV(3)   | // FRDIV    FLL External Reference Divider
      MCG_C1_IRCLKEN(1) | // IRCLEN   Internal Reference Clock Enable
      MCG_C1_IREFSTEN(0); // IREFSTEN Internal Reference Stop Enable

   //! Control Register 2
   static constexpr uint32_t c2 =
      MCG_C2_LOCRE0(0) | // LOLRE0  Loss of Clock Reset Enable
      MCG_C2_RANGE0(1) | // RANGE   Frequency Range Select
      MCG_C2_HGO0(0)   | // HGO     High Gain Oscillator Select
      MCG_C2_EREFS0(1) | // EREFS   External Reference Select
      MCG_C2_IRCS(0);    // IRCS    Internal Reference Clock Select

   //! Control Register 4
   static constexpr uint32_t c4 =
      MCG_C4_DMX32(0)     | // DMX32    DCO lock range
      MCG_C4_DRST_DRS(3);   // DRST_DRS DCO Range Select

   //! Control Register 5
   static constexpr uint32_t c5 =
      MCG_C5_PLLCLKEN0(0)  | // PLLCLKEN0 PLL Clock Enable
      MCG_C5_PLLSTEN0(0)   | // PLLSTEN0  PLL Stop Enable
      MCG_C5_PRDIV0(0);     // PRDIV0    PLL External Reference Divider

   //! Control Register 6
   static constexpr uint32_t c6 =
      MCG_C6_LOLIE0(0) | // LOLIE0 Loss of Lock interrupt Enable
      MCG_C6_CME0(0)   | // CME0   Clock Monitor Enable
      MCG_C6_VDIV0(0);   // VDIV0  PLL VCO Divider

   //! Status and Control Register
   static constexpr uint32_t sc =
      MCG_SC_FCRDIV(0); // FCRDIV Internal Clock Reference Divider

   //! Control Register 7
   static constexpr uint32_t c7 =
      MCG_C7_OSCSEL(0); // OSCSEL MCG OSC Clock Select

   //! Control Register 8
   static constexpr uint32_t c8 =
      MCG_C8_LOCRE1(0) | // LOCRE1 RTC Loss of Clock Reset Enable
      MCG_C8_LOLRE(0)  | // LOLRE  PLL Loss of Lock Reset Enable
      MCG_C8_CME1(0);    // CME1   Clock Monitor Enable 1

};

/** 
 * End MCG_Group
 * @}
 */
/**
 * @addtogroup OSC_Group OSC, Crystal Oscillator
 * @brief Pins used for Crystal Oscillator
 * @{
 */
#define USBDM_OSC0_IS_DEFINED 
/**
 * Peripheral information for OSC, Crystal Oscillator
 */
class Osc0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = OSC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = 0;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:osc0_div

   //! Frequency of OSC Clock or Crystal
   static constexpr uint32_t oscclk_clock = 8000000UL;

   //! Frequency of 32K OSC Clock or Crystal (if applicable)
   static constexpr uint32_t osc32kclk_clock = 0UL;

   //! Oscillator control register
   static constexpr uint32_t cr =
      OSC_CR_ERCLKEN(1) |
      OSC_CR_EREFSTEN(0) |
      OSC_CR_SCP(2);

   //! OSC Clock divider register
   static constexpr uint32_t div =
      OSC_DIV_ERPS(0);   
   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: XTAL0                = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: EXTAL0               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End OSC_Group
 * @}
 */
/**
 * @addtogroup PDB_Group PDB, Programmable Dely Block
 * @brief Pins used for Programmable Dely Block
 * @{
 */
#define USBDM_PDB0_IS_DEFINED 
/**
 * Peripheral information for PDB, Programmable Dely Block
 */
class Pdb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PDB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PDB0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PDB0_IRQn};

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: PDB0_EXTRG           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End PDB_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Pins used for Programmable Interrupt Timer
 * @{
 */
#define USBDM_PIT_IS_DEFINED 
/**
 * Peripheral information for PIT, Programmable Interrupt Timer
 */
class PitInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PIT_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PIT_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 4;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PIT0_IRQn, PIT1_IRQn, PIT2_IRQn, PIT3_IRQn};

   // Template:pit_4ch_chain

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Default value for PIT->SC register
   static constexpr uint32_t loadValue  = 
      10000;

   //! PIT operation in debug mode
   static constexpr uint32_t mcr = 
      PIT_MCR_FRZ(0);

};

/** 
 * End PIT_Group
 * @}
 */
/**
 * @addtogroup RTC_Group RTC, Real Time Clock
 * @brief Pins used for Real Time Clock
 * @{
 */
#define USBDM_RTC_IS_DEFINED 
/**
 * Peripheral information for RTC, Real Time Clock
 */
class RtcInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = RTC_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_RTC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {RTC_Alarm_IRQn, RTC_Seconds_IRQn};

   // Template:rtc_mk22f12810

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Frequency of RTC External Clock or Crystal
   static constexpr uint32_t rtcclk_clock = 32768UL;

   //! Oscillator control register
   static constexpr uint32_t cr =
      RTC_CR_OSCE(1) | // Enables 32kHz oscillator [RTC_32K]
      RTC_CR_CLKO(0) | // Disables RTC 32kHz Clock Output
      RTC_CR_UM(0)   | // Update Mode
      RTC_CR_SUP(0)  | // Supervisor access
      RTC_CR_WPE(0)  | // Wakeup Pin Enable
      RTC_CR_SCP(2);   // RTC Oscillator load capacitance

   //! Number of signals available in info table
   static constexpr int numSignals  = 3;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: XTAL32               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: EXTAL32              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: RTC_CLKOUT           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End RTC_Group
 * @}
 */
/**
 * @addtogroup SIM_Group SIM, System Integration Module
 * @brief Pins used for System Integration Module
 * @{
 */
#define USBDM_SIM_IS_DEFINED 
/**
 * Peripheral information for SIM, System Integration Module
 */
class SimInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SIM_BasePtr;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:sim_mk22f12810

   //! System Options Register 1
   static constexpr uint32_t sopt1 = 
      SIM_SOPT1_OSC32KSEL(2) |    // 32K oscillator clock select
      SIM_SOPT1_OSC32KOUT(0);     // 32K oscillator clock out pin select

   //! System Options Register 2
   static constexpr uint32_t sopt2 = 
      SIM_SOPT2_LPUARTSRC(0) |     // LPUART clock source select
      SIM_SOPT2_USBSRC(1) |        // USB clock source select
      SIM_SOPT2_PLLFLLSEL(3) |     // PLL/FLL clock select
      SIM_SOPT2_CLKOUTSEL(2) |     // CLKOUT pin clock source select
      SIM_SOPT2_RTCCLKOUTSEL(1);   // RTC clock out select

   //! System Options Register 4
   static constexpr uint32_t sopt4 = 
      SIM_SOPT4_FTM0TRG1SRC(0) |   // FlexTimer 0 Hardware Trigger 1 Source Select
      SIM_SOPT4_FTM0TRG0SRC(0) |   // FlexTimer 0 Hardware Trigger 0 Source Select
      SIM_SOPT4_FTM2CLKSEL(0)  |   // FlexTimer 2 External Clock Pin Select
      SIM_SOPT4_FTM1CLKSEL(0)  |   // FlexTimer 1 External Clock Pin Select
      SIM_SOPT4_FTM0CLKSEL(0)  |   // FlexTimer 0 External Clock Pin Select
      SIM_SOPT4_FTM2CH1SRC(0)  |   // FTM2 channel 1 input capture source select
      SIM_SOPT4_FTM2CH0SRC(0)  |   // FTM2 channel 0 input capture source select
      SIM_SOPT4_FTM1CH0SRC(0)  |   // FTM1 channel 0 input capture source select
      SIM_SOPT4_FTM2FLT0(0)    |   // FlexTimer 1 Fault 0 Select
      SIM_SOPT4_FTM1FLT0(0)    |   // FlexTimer 1 Fault 0 Select
      SIM_SOPT4_FTM0FLT1(0)    |   // FlexTimer 0 Fault 1 Select
      SIM_SOPT4_FTM0FLT0(0);       // FlexTimer 0 Fault 0 Select

   //! System Options Register 5
   static constexpr uint32_t sopt5 = 
      SIM_SOPT5_UART0TXSRC(0) |    // UART 0 transmit data source select
      SIM_SOPT5_UART0RXSRC(0) |    // UART 0 receive data source select
      SIM_SOPT5_UART1TXSRC(0) |    // UART 1 transmit data source select
      SIM_SOPT5_UART1RXSRC(0) |    // UART 1 receive data source select

      SIM_SOPT5_LPUART0RXSRC(0); // LPUART 0 receive data source select

   //! System Options Register 7
   static constexpr uint32_t sopt7 = 
      SIM_SOPT7_ADC1ALTTRGEN(0) |    // ADC1 alternate trigger enable
      SIM_SOPT7_ADC1PRETRGSEL(0) |   // ADC1 pretrigger select
      SIM_SOPT7_ADC1TRGSEL(0) |      // ADC1 trigger select

      SIM_SOPT7_ADC0ALTTRGEN(0) |    // ADC0 alternate trigger enable
      SIM_SOPT7_ADC0PRETRGSEL(0) |   // ADC0 pretrigger select
      SIM_SOPT7_ADC0TRGSEL(0);       // ADC0 trigger select

   //! System Options Register 8
   static constexpr uint32_t sopt8 = 
      SIM_SOPT8_FTM0OCH7SRC(0) |   // FTM0 channel 7 output source
      SIM_SOPT8_FTM0OCH6SRC(0) |   // FTM0 channel 6 output source
      SIM_SOPT8_FTM0OCH5SRC(0) |   // FTM0 channel 5 output source
      SIM_SOPT8_FTM0OCH4SRC(0) |   // FTM0 channel 4 output source
      SIM_SOPT8_FTM0OCH3SRC(0) |   // FTM0 channel 3 output source
      SIM_SOPT8_FTM0OCH2SRC(0) |   // FTM0 channel 2 output source
      SIM_SOPT8_FTM0OCH1SRC(0) |   // FTM0 channel 1 output source
      SIM_SOPT8_FTM0OCH0SRC(0);    // FTM0 channel 0 output source

   //! System Clock Divider Register 1
   static constexpr uint32_t clkdiv1 = 
      SIM_CLKDIV1_OUTDIV4(12)|  // Core/system clock
      SIM_CLKDIV1_OUTDIV2(12)|  // Bus clock
      SIM_CLKDIV1_OUTDIV1(12);  // Core/system clock 

   //! System Clock Divider Register 2
   static constexpr uint32_t clkdiv2 = 
      3;  // USB clock divider divisor & fraction 

   static void initRegs() {
      
      #ifdef SIM_SCGC4_USBOTG_MASK
      // The USB interface must be disabled for clock changes to have effect
      SIM->SCGC4 &= ~SIM_SCGC4_USBOTG_MASK;
      #endif
   
      SIM->SOPT1 = sopt1;
      SIM->SOPT2 = sopt2;
      SIM->SOPT4 = sopt4;
      SIM->SOPT5 = sopt5;
      SIM->SOPT7 = sopt7;
      SIM->SOPT8 = sopt8;
   
      SIM->CLKDIV1 = clkdiv1;
      SIM->CLKDIV2 = clkdiv2;
   }
};

/** 
 * End SIM_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Pins used for Serial Peripheral Interface
 * @{
 */
#define USBDM_SPI0_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI0_IRQn};

   // Template:spi0_mk_pcsis6

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

#ifdef SPI_CTAR_LSBFE_SHIFT
   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint32_t modeValue = 
      SPI_CTAR_LSBFE(0)| // LSB or MSB first
      SPI_CTAR_MODE(1);  // Mode (CPOL+CPHA)

#endif

   static uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   //! Default speed (Hz)
   static constexpr uint32_t speed = 
      10000000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SPI0_SCK             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SPI0_SIN             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SPI0_SOUT            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SPI0_PCS0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: SPI0_PCS1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: SPI0_PCS2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: SPI0_PCS3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: SPI0_PCS4            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: SPI0_PCS5            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_SPI1_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI1_IRQn};

   // Template:spi0_mk_pcsis6

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

#ifdef SPI_CTAR_LSBFE_SHIFT
   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint32_t modeValue = 
      SPI_CTAR_LSBFE(0)| // LSB or MSB first
      SPI_CTAR_MODE(1);  // Mode (CPOL+CPHA)

#endif

   static uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   //! Default speed (Hz)
   static constexpr uint32_t speed = 
      100000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 7;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SPI1_SCK             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SPI1_SIN             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SPI1_SOUT            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SPI1_PCS0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: SPI1_PCS1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: SPI1_PCS2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: SPI1_PCS3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End SPI_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchronous Receiver/Transmitter
 * @brief Pins used for Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_UART0_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART0_RX_TX_IRQn};

   // Template:uart0_mk21fa12_c7816

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static uint32_t getClockFrequency() {
     return SystemCoreClock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART0_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART0_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART0_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART0_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART1_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART1_RX_TX_IRQn};

   // Template:uart1_mk10d10

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static uint32_t getClockFrequency() {
     return SystemCoreClock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART1_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART1_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART1_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART1_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART2_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART2_RX_TX_IRQn};

   // Template:uart1_mk10d10

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static uint32_t getClockFrequency() {
     return SystemBusClock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART2_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART2_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART2_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART2_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End UART_Group
 * @}
 */
/**
 * @addtogroup USB_Group USB, USB OTG Controller
 * @brief Pins used for USB OTG Controller
 * @{
 */
#define USBDM_USB0_IS_DEFINED 
/**
 * Peripheral information for USB, USB OTG Controller
 */
class Usb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_USBOTG_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {USB0_IRQn};

   // Template:usb0_otg_clkrcv_a

   //! Install Callback handler
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: USB_CLKIN            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: USB_SOF_OUT          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End USB_Group
 * @}
 */
/**
 * @addtogroup VREF_Group VREF, Voltage Reference
 * @brief Pins used for Voltage Reference
 * @{
 */
#define USBDM_VREF_IS_DEFINED 
/**
 * Peripheral information for VREF, Voltage Reference
 */
class VrefInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = VREF_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_VREF_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: VREF_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End VREF_Group
 * @}
 */

} // End namespace USBDM

#include "adc.h"
#include "ftm.h"
#include "gpio.h"

namespace USBDM {

/**
 * Used to configure pin-mapping before 1st use of peripherals
 */
extern void mapAllPins();

} // End namespace USBDM
/**
 *
 * @mainpage Summary
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3                           | K2                        | -       
 *  ADC0_DM1                 | ADC0_DM1                                    | H2                        | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC1_DP3                           | K1                        | -       
 *  ADC0_DP1                 | ADC0_DP1                                    | H1                        | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3                           | L2                        | -       
 *  ADC1_DM1                 | ADC1_DM1/ADC0_DM2                           | J2                        | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3                           | L1                        | -       
 *  ADC1_DP1                 | ADC1_DP1/ADC0_DP2                           | J1                        | -       
 *  CMP0_IN4                 | CMP0_IN4/ADC1_SE23                          | K4                        | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 | K5                        | -       
 *  EXTAL32                  | EXTAL32                                     | L5                        | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK/EZP_CLK                   | J6                        | -       
 *  PTA1                     | JTAG_TDI/EZP_DI                             | H8                        | -       
 *  PTA2                     | JTAG_TDO/TRACE_SWO/EZP_DO                   | J7                        | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | H9                        | -       
 *  PTA4                     | NMI_b/EZP_CS_b                              | J8                        | -       
 *  PTA5                     | Disabled                                    | K7                        | -       
 *  PTA12                    | Disabled                                    | K8                        | -       
 *  PTA13                    | Disabled                                    | L8                        | -       
 *  PTA14                    | Disabled                                    | K9                        | -       
 *  PTA15                    | Disabled                                    | L9                        | -       
 *  PTA16                    | Disabled                                    | J10                       | -       
 *  PTA17                    | ADC1_SE17                                   | H10                       | -       
 *  PTA18                    | EXTAL0                                      | L11                       | -       
 *  PTA19                    | XTAL0                                       | K11                       | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8                           | G11                       | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9                           | G10                       | -       
 *  PTB2                     | ADC0_SE12                                   | G9                        | -       
 *  PTB3                     | ADC0_SE13                                   | G8                        | -       
 *  PTB8                     | Disabled                                    | D11                       | -       
 *  PTB9                     | Disabled                                    | E10                       | -       
 *  PTB10                    | ADC1_SE14                                   | D10                       | -       
 *  PTB11                    | ADC1_SE15                                   | C10                       | -       
 *  PTB16                    | Disabled                                    | B10                       | -       
 *  PTB17                    | Disabled                                    | E9                        | -       
 *  PTB18                    | Disabled                                    | D9                        | -       
 *  PTB19                    | Disabled                                    | C9                        | -       
 *  PTB20                    | Disabled                                    | F10                       | -       
 *  PTB21                    | Disabled                                    | F9                        | -       
 *  PTB22                    | Disabled                                    | F8                        | -       
 *  PTB23                    | Disabled                                    | E8                        | -       
 *  PTC0                     | ADC0_SE14                                   | B9                        | -       
 *  PTC1                     | ADC0_SE15                                   | D8                        | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0                          | C8                        | -       
 *  PTC3                     | CMP1_IN1                                    | B8                        | -       
 *  PTC4                     | Disabled                                    | A8                        | -       
 *  PTC5                     | Disabled                                    | D7                        | -       
 *  PTC6                     | CMP0_IN0                                    | C7                        | -       
 *  PTC7                     | CMP0_IN1                                    | B7                        | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | A7                        | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | D6                        | -       
 *  PTC10                    | ADC1_SE6b                                   | C6                        | -       
 *  PTC11                    | ADC1_SE7b                                   | C5                        | -       
 *  PTC12                    | Disabled                                    | B6                        | -       
 *  PTC13                    | Disabled                                    | A6                        | -       
 *  PTC14                    | Disabled                                    | A5                        | -       
 *  PTC15                    | Disabled                                    | B5                        | -       
 *  PTC16                    | Disabled                                    | D5                        | -       
 *  PTC17                    | Disabled                                    | C4                        | -       
 *  PTC18                    | Disabled                                    | B4                        | -       
 *  PTD0                     | Disabled                                    | D4                        | -       
 *  PTD1                     | ADC0_SE5b                                   | D3                        | -       
 *  PTD2                     | Disabled                                    | C3                        | -       
 *  PTD3                     | Disabled                                    | B3                        | -       
 *  PTD4                     | Disabled                                    | A3                        | -       
 *  PTD5                     | ADC0_SE6b                                   | A2                        | -       
 *  PTD6                     | ADC0_SE7b                                   | B2                        | -       
 *  PTD7                     | Disabled                                    | A1                        | -       
 *  PTE0                     | ADC1_SE4a                                   | E4                        | -       
 *  PTE1                     | ADC1_SE5a                                   | E3                        | -       
 *  PTE2                     | ADC1_SE6a                                   | E2                        | -       
 *  PTE3                     | ADC1_SE7a                                   | F4                        | -       
 *  PTE4                     | Disabled                                    | H7                        | -       
 *  PTE5                     | Disabled                                    | G4                        | -       
 *  PTE6                     | Disabled                                    | F3                        | -       
 *  PTE24                    | ADC0_SE17                                   | H5                        | -       
 *  PTE25                    | ADC0_SE18                                   | J5                        | -       
 *  PTE26                    | Disabled                                    | H6                        | -       
 *  RESET_b                  | RESET_b                                     | J11                       | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        | L3                        | -       
 *  XTAL32                   | XTAL32                                      | L4                        | -       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTD7                     | Disabled                                    | A1                        | -       
 *  PTD5                     | ADC0_SE6b                                   | A2                        | -       
 *  PTD4                     | Disabled                                    | A3                        | -       
 *  PTC14                    | Disabled                                    | A5                        | -       
 *  PTC13                    | Disabled                                    | A6                        | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | A7                        | -       
 *  PTC4                     | Disabled                                    | A8                        | -       
 *  PTD6                     | ADC0_SE7b                                   | B2                        | -       
 *  PTD3                     | Disabled                                    | B3                        | -       
 *  PTC18                    | Disabled                                    | B4                        | -       
 *  PTC15                    | Disabled                                    | B5                        | -       
 *  PTC12                    | Disabled                                    | B6                        | -       
 *  PTC7                     | CMP0_IN1                                    | B7                        | -       
 *  PTC3                     | CMP1_IN1                                    | B8                        | -       
 *  PTC0                     | ADC0_SE14                                   | B9                        | -       
 *  PTB16                    | Disabled                                    | B10                       | -       
 *  PTD2                     | Disabled                                    | C3                        | -       
 *  PTC17                    | Disabled                                    | C4                        | -       
 *  PTC11                    | ADC1_SE7b                                   | C5                        | -       
 *  PTC10                    | ADC1_SE6b                                   | C6                        | -       
 *  PTC6                     | CMP0_IN0                                    | C7                        | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0                          | C8                        | -       
 *  PTB19                    | Disabled                                    | C9                        | -       
 *  PTB11                    | ADC1_SE15                                   | C10                       | -       
 *  PTD1                     | ADC0_SE5b                                   | D3                        | -       
 *  PTD0                     | Disabled                                    | D4                        | -       
 *  PTC16                    | Disabled                                    | D5                        | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | D6                        | -       
 *  PTC5                     | Disabled                                    | D7                        | -       
 *  PTC1                     | ADC0_SE15                                   | D8                        | -       
 *  PTB18                    | Disabled                                    | D9                        | -       
 *  PTB10                    | ADC1_SE14                                   | D10                       | -       
 *  PTB8                     | Disabled                                    | D11                       | -       
 *  PTE2                     | ADC1_SE6a                                   | E2                        | -       
 *  PTE1                     | ADC1_SE5a                                   | E3                        | -       
 *  PTE0                     | ADC1_SE4a                                   | E4                        | -       
 *  PTB23                    | Disabled                                    | E8                        | -       
 *  PTB17                    | Disabled                                    | E9                        | -       
 *  PTB9                     | Disabled                                    | E10                       | -       
 *  PTE6                     | Disabled                                    | F3                        | -       
 *  PTE3                     | ADC1_SE7a                                   | F4                        | -       
 *  PTB22                    | Disabled                                    | F8                        | -       
 *  PTB21                    | Disabled                                    | F9                        | -       
 *  PTB20                    | Disabled                                    | F10                       | -       
 *  PTE5                     | Disabled                                    | G4                        | -       
 *  PTB3                     | ADC0_SE13                                   | G8                        | -       
 *  PTB2                     | ADC0_SE12                                   | G9                        | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9                           | G10                       | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8                           | G11                       | -       
 *  ADC0_DP1                 | ADC0_DP1                                    | H1                        | -       
 *  ADC0_DM1                 | ADC0_DM1                                    | H2                        | -       
 *  PTE24                    | ADC0_SE17                                   | H5                        | -       
 *  PTE26                    | Disabled                                    | H6                        | -       
 *  PTE4                     | Disabled                                    | H7                        | -       
 *  PTA1                     | JTAG_TDI/EZP_DI                             | H8                        | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | H9                        | -       
 *  PTA17                    | ADC1_SE17                                   | H10                       | -       
 *  ADC1_DP1                 | ADC1_DP1/ADC0_DP2                           | J1                        | -       
 *  ADC1_DM1                 | ADC1_DM1/ADC0_DM2                           | J2                        | -       
 *  PTE25                    | ADC0_SE18                                   | J5                        | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK/EZP_CLK                   | J6                        | -       
 *  PTA2                     | JTAG_TDO/TRACE_SWO/EZP_DO                   | J7                        | -       
 *  PTA4                     | NMI_b/EZP_CS_b                              | J8                        | -       
 *  PTA16                    | Disabled                                    | J10                       | -       
 *  RESET_b                  | RESET_b                                     | J11                       | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC1_DP3                           | K1                        | -       
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3                           | K2                        | -       
 *  CMP0_IN4                 | CMP0_IN4/ADC1_SE23                          | K4                        | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 | K5                        | -       
 *  PTA5                     | Disabled                                    | K7                        | -       
 *  PTA12                    | Disabled                                    | K8                        | -       
 *  PTA14                    | Disabled                                    | K9                        | -       
 *  PTA19                    | XTAL0                                       | K11                       | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3                           | L1                        | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3                           | L2                        | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        | L3                        | -       
 *  XTAL32                   | XTAL32                                      | L4                        | -       
 *  EXTAL32                  | EXTAL32                                     | L5                        | -       
 *  PTA13                    | Disabled                                    | L8                        | -       
 *  PTA15                    | Disabled                                    | L9                        | -       
 *  PTA18                    | EXTAL0                                      | L11                       | -       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3                           | K2                        | -       
 *  ADC0_DM1                 | ADC0_DM1                                    | H2                        | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC1_DP3                           | K1                        | -       
 *  ADC0_DP1                 | ADC0_DP1                                    | H1                        | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0                          | C8                        | -       
 *  PTD1                     | ADC0_SE5b                                   | D3                        | -       
 *  PTD5                     | ADC0_SE6b                                   | A2                        | -       
 *  PTD6                     | ADC0_SE7b                                   | B2                        | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8                           | G11                       | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9                           | G10                       | -       
 *  PTB2                     | ADC0_SE12                                   | G9                        | -       
 *  PTB3                     | ADC0_SE13                                   | G8                        | -       
 *  PTC0                     | ADC0_SE14                                   | B9                        | -       
 *  PTC1                     | ADC0_SE15                                   | D8                        | -       
 *  PTE24                    | ADC0_SE17                                   | H5                        | -       
 *  PTE25                    | ADC0_SE18                                   | J5                        | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3                           | L2                        | -       
 *  ADC1_DM1                 | ADC1_DM1/ADC0_DM2                           | J2                        | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3                           | L1                        | -       
 *  ADC1_DP1                 | ADC1_DP1/ADC0_DP2                           | J1                        | -       
 *  PTE0                     | ADC1_SE4a                                   | E4                        | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | A7                        | -       
 *  PTE1                     | ADC1_SE5a                                   | E3                        | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | D6                        | -       
 *  PTE2                     | ADC1_SE6a                                   | E2                        | -       
 *  PTC10                    | ADC1_SE6b                                   | C6                        | -       
 *  PTE3                     | ADC1_SE7a                                   | F4                        | -       
 *  PTC11                    | ADC1_SE7b                                   | C5                        | -       
 *  PTB10                    | ADC1_SE14                                   | D10                       | -       
 *  PTB11                    | ADC1_SE15                                   | C10                       | -       
 *  PTA17                    | ADC1_SE17                                   | H10                       | -       
 *  PTC6                     | CMP0_IN0                                    | C7                        | -       
 *  PTC7                     | CMP0_IN1                                    | B7                        | -       
 *  CMP0_IN4                 | CMP0_IN4/ADC1_SE23                          | K4                        | -       
 *  PTC3                     | CMP1_IN1                                    | B8                        | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 | K5                        | -       
 *  PTE26                    | Disabled                                    | H6                        | -       
 *  PTA18                    | EXTAL0                                      | L11                       | -       
 *  EXTAL32                  | EXTAL32                                     | L5                        | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK/EZP_CLK                   | J6                        | -       
 *  PTA1                     | JTAG_TDI/EZP_DI                             | H8                        | -       
 *  PTA2                     | JTAG_TDO/TRACE_SWO/EZP_DO                   | J7                        | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | H9                        | -       
 *  PTA4                     | NMI_b/EZP_CS_b                              | J8                        | -       
 *  RESET_b                  | RESET_b                                     | J11                       | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        | L3                        | -       
 *  PTA19                    | XTAL0                                       | K11                       | -       
 *  XTAL32                   | XTAL32                                      | L4                        | -       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
